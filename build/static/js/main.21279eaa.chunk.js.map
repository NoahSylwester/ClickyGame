{"version":3,"sources":["logo.svg","components/Navbar/Navbar.js","components/Image/Image.js","components/Board/Board.js","pages/Game.js","utils/API.js","components/Search/Search.js","pages/Splash.js","pages/Error.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Navbar","className","href","Image","props","src","Board","data","hits","slice","map","element","largeImageURL","Game","state","array","clickedElements","score","topScore","clickedElement","this","setState","push","style","position","width","height","click","handleClick","React","Component","input","axios","get","replace","Search","queryString","event","preventDefault","enter","handleInputChange","target","name","value","placeholder","onChange","onClick","margin","Splash","display","flexDirection","justifyContent","alignItems","App","gameStart","ApiResponse","query","API","then","res","length","i","beginGame","exit","stopGame","bind","handleSearch","search","Error","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.21279eaa.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.25bf045c.svg\";","import React from 'react';\nimport './index.css';\n\nfunction Navbar() {\n    return (\n        <div className=\"Navbar\">\n            <a className=\"brand\" href=\"/\">Image Clicker</a>\n            <span className=\"result\">Correct/Incorrect</span>\n            <span className=\"topScore\">Top Score</span>\n        </div>\n    )\n}\n\nexport default Navbar;","import React from 'react';\nimport './index.css';\n\nfunction Image(props) {\n    return (\n        <div className=\"imgWrapper\">\n            <img src={props.src} />\n        </div>\n    )\n}\n\nexport default Image;","import React from 'react';\nimport Image from '../Image/Image';\nimport './index.css';\n\nfunction Board(props) {\n    return (\n        <div className=\"Board\">\n            <div className=\"imageRow\">{props.data.data.hits.slice(0,4).map((element) => <Image src={element.largeImageURL}/>)}</div>\n            <div className=\"imageRow\">{props.data.data.hits.slice(5,9).map((element) => <Image src={element.largeImageURL}/>)}</div>\n            <div className=\"imageRow bottom\">{props.data.data.hits.slice(10,14).map((element) => <Image src={element.largeImageURL}/>)}</div>\n        </div>\n    )\n}\n\nexport default Board;","import React from 'react';\nimport Navbar from '../components/Navbar/Navbar';\nimport Board from '../components/Board/Board';\n\nclass Game extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            array: [],\n            clickedElements: [],\n            score: 0,\n            topScore: 0,\n        }\n    }\n\n    handleClick(clickedElement) {\n        // correct guess increments score, updates guesses, and randomizes array\n        this.setState({\n            score: this.state.score + 1,\n            clickedElements: this.state.clickedElements.push(clickedElement)\n        })\n        // update highest score if applicable\n        this.setState({\n            topScore: this.state.topScore + 1,\n        })\n        // incorrect guess resets score and randomizes array\n        this.setState({\n            score: this.state.score + 1,\n            clickedElements: [],\n        })\n    }\n\n    render() {\n        return (\n            <div style={{ position: 'relative', width: '100%', height: '100%' }}>\n                <Navbar>NAVBAR</Navbar>\n                <Board data={this.props.data} click={this.handleClick}>BOARD</Board>\n            </div>\n        )\n    }\n}\n\nexport default Game;","import axios from 'axios';\nimport dotenv from 'dotenv';\n\nconst API_KEY = '14410776-c69a6ea84b5c2dc56d5dda714';\n\nexport default {\n    getImages: (input) => {\n        return axios.get(`https://pixabay.com/api/?key=${API_KEY}&q=${input.replace(\" \", \"+\")}`)\n    }\n}","import React from 'react';\nimport API from '../../utils/API';\nimport './index.css'\n\nclass Search extends React.Component {\n    state = {\n        queryString: \"\",\n    };\n\n    handleClick = event => {\n        event.preventDefault();\n        this.props.enter(this.state.queryString);\n    }\n\n    handleInputChange = event => {\n        // Getting the value and name of the input which triggered the change\n        const { name, value } = event.target;\n    \n        // Updating the input's state\n        this.setState({\n          [name]: value\n        });\n      };\n    \n\n    render() {\n        return (\n            <div className=\"Search\">\n                <input \n                    name=\"queryString\"\n                    value={this.state.queryString}\n                    placeholder=\"Search something...\"\n                    onChange={this.handleInputChange}\n                />\n                <br />\n                <button\n                    onClick={this.handleClick}\n                    style={{ margin: '20px 0 20px 0'}}\n                >\n                    Enter\n                </button>\n            </div>\n        )\n    }\n}\n\nexport default Search;","import React from 'react';\nimport Search from '../components/Search/Search';\n\nclass Splash extends React.Component {\n    constructor(props) {\n        super(props);\n        // this.state = {\n        //     array: [],\n        // }\n    }\n    render() {\n        return (\n            <div style={{ display: 'flex', flexDirection: 'column', justifyContent: 'center', alignItems: 'center', width: '100%', height: '100%' }}>\n                <h1>Image Clicker</h1>\n                <Search enter={this.props.enter} />\n            </div>\n        )\n    }\n}\n\nexport default Splash;","import React from 'react';\n\nclass Game extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            array: [],\n        }\n    }\n    render() {\n        return (\n            <div>\n                <h1>Something went wrong. ):</h1>\n            </div>\n        )\n    }\n}\n\nexport default Game;","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Game from './pages/Game';\nimport Splash from './pages/Splash';\nimport Error from './pages/Error';\nimport API from './utils/API';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n        gameStart: false,\n        ApiResponse: \"\",\n    }\n  }\n\n  beginGame() {\n    this.setState({\n      gameStart: true,\n    })\n  }\n\n  stopGame() {\n    this.setState({\n      gameStart: false,\n    })\n  }\n\n  handleSearch(query) {\n    API.getImages(query).then((res) => {\n      if (res.data.hits.length < 16) {\n        for (let i = 0; i < 16; i++) {\n          res.data.hits.push({ largeImageURL: \"https://usatftw.files.wordpress.com/2019/02/orca.jpg?w=605&h=363&crop=1&zoom=2\" })\n        }\n      }\n      this.setState({\n        ApiResponse: res,\n      })\n      this.beginGame();\n    });\n  };\n\n  render() {\n    switch (this.state.gameStart) {\n      case true:\n        return <Game exit={this.stopGame.bind(this)} data={this.state.ApiResponse} />;\n      case false:\n        return <Splash enter={this.handleSearch.bind(this)} search={this.handleSearch} />;\n      default:\n        return <Error />;\n    }\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}