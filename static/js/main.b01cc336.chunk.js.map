{"version":3,"sources":["logo.svg","components/Navbar/Navbar.js","components/Image/Image.js","components/Board/Board.js","utils/API.js","components/Search/Search.js","components/Win/Win.js","pages/Game.js","pages/Splash.js","pages/Error.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Navbar","props","className","href","resultText","score","topScore","Image","src","onClick","click","id","key","Board","data","slice","length","map","element","largeImageURL","input","axios","get","replace","Search","state","queryString","error","handleClick","event","a","numImages","preventDefault","enter","newArr","console","log","harder","reset","dataArray","clickedElements","win","setState","handleInputChange","target","name","value","this","placeholder","onChange","style","margin","React","Component","Win","Game","arrayInput","array","i","j","Math","floor","random","temp","clickedElementId","includes","shuffleArray","newArray","push","position","width","height","bind","Splash","display","flexDirection","justifyContent","alignItems","fontFamily","App","gameStart","ApiResponse","query","API","res","hits","resSlice","beginGame","handleSearch","exit","stopGame","search","Error","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b01cc336.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.25bf045c.svg\";","import React from 'react';\nimport './index.css';\n\nfunction Navbar(props) {\n    return (\n        <div className=\"Navbar\">\n            <a className=\"brand\" href=\"/\">Image Clicker</a>\n            <span className={props.resultText === 'Correct!' ? 'result-correct' : (props.resultText === 'Incorrect.' ? 'result-incorrect' : 'result')}>{props.resultText}</span>\n            <span className=\"topScore\">\n                Score: <span className='score'>{props.score}</span>\n                &nbsp;&nbsp;&nbsp;//&nbsp; \n                Top Score: <span className='score'>{props.topScore}</span>\n                &nbsp;&nbsp;&nbsp;&nbsp;\n            </span>\n        </div>\n    )\n}\n\nexport default Navbar;","import React from 'react';\nimport './index.css';\n\nfunction Image(props) {\n    return (\n        <div className=\"imgWrapper\">\n            <img src={props.src} onClick={() => props.click(props.id)} key={props.id} id={props.id} />\n        </div>\n    )\n}\n\nexport default Image;","import React from 'react';\nimport Image from '../Image/Image';\nimport './index.css';\n\nfunction Board(props) {\n    return (\n        <div className=\"Board\">\n            <div className=\"imageRow\">{props.data.slice(0, props.data.length/3).map((element) => <Image src={element.largeImageURL} id={element.id} click={props.click} />)}</div>\n            <div className=\"imageRow\">{props.data.slice(props.data.length/3, props.data.length * 2/3).map((element) => <Image src={element.largeImageURL} id={element.id} click={props.click} />)}</div>\n            <div className=\"imageRow bottom\">{props.data.slice(props.data.length * 2/3, props.data.length).map((element) => <Image src={element.largeImageURL} id={element.id} click={props.click} />)}</div>\n        </div>\n    )\n}\n\nexport default Board;","import axios from 'axios';\nimport dotenv from 'dotenv';\n\nconst API_KEY = '14410776-c69a6ea84b5c2dc56d5dda714';\n\nexport default {\n    getImages: (input) => {\n        return axios.get(`https://pixabay.com/api/?key=${API_KEY}&q=${input.replace(\" \", \"+\")}`)\n    }\n}","import React from 'react';\nimport API from '../../utils/API';\nimport './index.css'\nimport { thisExpression } from '@babel/types';\n\nclass Search extends React.Component {\n    state = {\n        queryString: \"\",\n        error: '',\n    };\n\n    handleClick = async (event, numImages = 12) => {\n        if (this.state.queryString !== \"\") {\n            event.preventDefault();\n            const newArr = await this.props.enter(this.state.queryString, numImages);\n            console.log('newarr', newArr);\n            if (this.props.harder === true) {\n                this.props.reset({\n                    dataArray: newArr,\n                    clickedElements: [],\n                    score: 0,\n                    topScore: newArr.length - 3,\n                    resultText: \"Click an image...\",\n                    win: false\n                })\n            }\n        }\n        else {\n            this.setState({\n                queryString: \"\",\n                error: \"Enter a search term!\"\n            })\n        }\n    }\n\n    handleInputChange = event => {\n        // Getting the value and name of the input which triggered the change\n        const { name, value } = event.target;\n    \n        // Updating the input's state\n        this.setState({\n          [name]: value\n        });\n      };\n    \n\n    render() {\n        return (\n            <div className=\"Search\">\n                { !this.props.harder ? <h1>Image Clicker</h1> : <div />}\n                <input \n                    name=\"queryString\"\n                    value={this.state.queryString}\n                    placeholder=\"Search something...\"\n                    onChange={this.handleInputChange}\n                />\n                <br />\n                <button\n                    onClick={event => this.handleClick(event, this.props.numImages)}\n                    style={{ margin: '20px 0 20px 0'}}\n                >\n                    Enter\n                </button>\n                <p className={this.props.harder ? \"error-harder\" : \"error\"}>{this.state.error}</p>\n            </div>\n        )\n    }\n}\n\nexport default Search;","import React from 'react';\nimport Image from '../Image/Image';\nimport Search from '../Search/Search'\nimport './index.css';\n\nfunction Win(props) {\n    console.log('num Win', props.numImages);\n    return (\n        <div className=\"Win\">\n            <h1>You win!</h1>\n            <p>Continue? Enter a new search term for an even tougher challenge...</p>\n            <Search harder enter={props.enter} numImages={props.numImages} reset={props.reset} />\n        </div>\n    )\n}\n\nexport default Win;","import React from 'react';\nimport Navbar from '../components/Navbar/Navbar';\nimport Board from '../components/Board/Board';\nimport Win from '../components/Win/Win';\n\nclass Game extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            dataArray: this.props.data,\n            clickedElements: [],\n            score: 0,\n            topScore: 0,\n            resultText: \"Click an image...\",\n            win: false\n        }\n    }\n\n    componentDidMount() {\n        this.setState({\n            dataArray: this.props.data,\n        })\n    }\n\n    // shuffle function taken from the following url:\n    // https://medium.com/@nitinpatel_20236/how-to-shuffle-correctly-shuffle-an-array-in-javascript-15ea3f84bfb\n    shuffleArray(arrayInput) {\n        let array = arrayInput.slice();\n        for ( let i = array.length - 1; i > 0; i-- ) {\n            const j = Math.floor(Math.random() * i)\n            const temp = array[i]\n            array[i] = array[j]\n            array[j] = temp\n          }\n        return array;\n    }\n\n    handleClick(clickedElementId) {\n        if ( !this.state.clickedElements.includes(clickedElementId) ) {\n            // correct guess increments score, updates guesses, and randomizes array\n            const newArray = this.state.clickedElements.slice();\n            newArray.push(clickedElementId);\n            this.setState({\n                score: this.state.score + 1,\n                clickedElements: newArray,\n                dataArray: this.shuffleArray(this.state.dataArray),\n                resultText: \"Correct!\",\n            })\n            if ( this.state.score + 1 > this.state.topScore ) {\n                // update highest score if applicable\n                this.setState({\n                    topScore: this.state.score + 1,\n                })\n            }\n            if ( this.state.score + 1 >= this.state.dataArray.length ) {\n                // check for win\n                this.setState({\n                    win: true\n                })\n            }\n        }\n        else {\n            // incorrect guess resets score and randomizes array\n            this.setState({\n                score: 0,\n                clickedElements: [],\n                dataArray: this.shuffleArray(this.state.dataArray),\n                resultText: \"Incorrect.\",\n            })\n        }\n    }\n\n    render() {\n        return (\n            <div style={{ position: 'relative', width: '100%', height: '100%' }}>\n                <Navbar score={this.state.score} topScore={this.state.topScore} resultText={this.state.resultText}>NAVBAR</Navbar>\n                { !this.state.win ? \n                <Board data={this.state.dataArray} click={this.handleClick.bind(this)}>BOARD</Board>\n                :\n                <Win enter={this.props.enter} numImages={this.state.dataArray.length + 3} reset={this.setState.bind(this)} />\n                }\n            </div>\n        )\n    }\n}\n\nexport default Game;","import React from 'react';\nimport Search from '../components/Search/Search';\n\nclass Splash extends React.Component {\n    constructor(props) {\n        super(props);\n        // this.state = {\n        //     array: [],\n        // }\n    }\n    render() {\n        return (\n            <div style={{\n                display: 'flex',\n                flexDirection: 'column',\n                justifyContent: 'center',\n                alignItems: 'center',\n                width: '100%',\n                height: '100%',\n                fontFamily: \"'Comfortaa', cursive\",\n            }}>\n                <Search enter={this.props.enter} numImages={3} />\n            </div>\n        )\n    }\n}\n\nexport default Splash;","import React from 'react';\n\nclass Game extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            array: [],\n        }\n    }\n    render() {\n        return (\n            <div>\n                <h1>Something went wrong. ):</h1>\n            </div>\n        )\n    }\n}\n\nexport default Game;","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Game from './pages/Game';\nimport Splash from './pages/Splash';\nimport Error from './pages/Error';\nimport API from './utils/API';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n        gameStart: false,\n        ApiResponse: \"\",\n    }\n  }\n\n  beginGame() {\n    this.setState({\n      gameStart: true,\n    })\n  }\n\n  stopGame() {\n    this.setState({\n      gameStart: false,\n    })\n  }\n\n  async handleSearch(query, numImages = 12) {\n    const res = await API.getImages(query);\n    \n      if (res.data.hits.length < numImages) {\n        for (let i = 0; i < numImages; i++) {\n          // if not enough results for search term, fills in rest of images with random images from picsum\n          res.data.hits.push({ id: Math.random(), largeImageURL: `https://picsum.photos/200?random=${i + 1}` })\n        }\n      }\n      const resSlice = res.data.hits.slice(0, numImages);\n      console.log(resSlice);\n      this.setState({\n        ApiResponse: resSlice,\n      })\n      this.beginGame();\n      return resSlice;\n  };\n\n  render() {\n    switch (this.state.gameStart) {\n      case true:\n        return <Game enter={this.handleSearch.bind(this)} exit={this.stopGame.bind(this)} data={this.state.ApiResponse} />;\n      case false:\n        return <Splash enter={this.handleSearch.bind(this)} search={this.handleSearch} />;\n      default:\n        return <Error />;\n    }\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}